# CMakeLists.txt for MCP Server project - Modern C build system
cmake_minimum_required(VERSION 3.20)
project(MCP_SERVER VERSION 1.0.0 LANGUAGES C)

# =============================================================================
# DEVELOPMENT ENVIRONMENT SETUP (Execute once)
# =============================================================================

# Create lock file to track if dev setup has been run
set(DEV_SETUP_LOCK "${CMAKE_SOURCE_DIR}/.dev_setup_complete")
set(DEV_SCRIPT "${CMAKE_SOURCE_DIR}/scripts/dev.sh")

# Only run development setup if lock file doesn't exist
if(NOT EXISTS ${DEV_SETUP_LOCK})
    message(STATUS "Setting up development environment for the first time...")
    
    # Ensure scripts directory exists
    file(MAKE_DIRECTORY "${CMAKE_SOURCE_DIR}/scripts")
    
    # Generate comprehensive development setup script
    file(WRITE ${DEV_SCRIPT}
"#!/usr/bin/env bash
# Comprehensive development environment setup for RKLLM MCP Server
# Auto-generated by CMake - DO NOT EDIT MANUALLY

set -e  # Exit on any error

# Colors for output
RED='\\033[0;31m'
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
BLUE='\\033[0;34m'
NC='\\033[0m' # No Color

echo -e \"\\${BLUE}🚀 Setting up RKLLM MCP Server development environment...\\${NC}\"

# Update system packages
echo -e \"\\${YELLOW}📦 Updating system packages...\\${NC}\"
sudo apt-get update -qq

# Install essential development tools
echo -e \"\\${YELLOW}🔧 Installing essential development tools...\\${NC}\"
sudo apt-get install -y \\
    build-essential \\
    git \\
    curl \\
    wget \\
    cmake \\
    pkg-config \\
    software-properties-common \\
    apt-transport-https \\
    ca-certificates \\
    gnupg \\
    lsb-release \\
    unzip

# Install reverse engineering and debugging tools
echo -e \"\\${YELLOW}🔍 Installing reverse engineering and debugging tools...\\${NC}\"
sudo apt-get install -y \\
    gdb \\
    gdb-multiarch \\
    valgrind \\
    strace \\
    ltrace \\
    binutils \\
    binutils-dev \\
    strings \\
    file \\
    hexdump \\
    xxd \\
    objdump \\
    readelf \\
    nm \\
    objcopy \\
    strip \\
    addr2line \\
    c++filt \\
    size \\
    ar \\
    ranlib

# Get latest LLVM version from GitHub API
echo -e \"\\${YELLOW}🔍 Getting latest LLVM version...\\${NC}\"
LLVM_LATEST=\\$(curl -s https://api.github.com/repos/llvm/llvm-project/releases/latest | grep tag_name | cut -d '\"' -f4 | head -1)
LLVM_VERSION=\\$(echo \"\\$LLVM_LATEST\" | sed 's/^llvmorg-//')
LLVM_MAJOR=\\$(echo \"\\$LLVM_VERSION\" | cut -d. -f1)

echo -e \"\\${BLUE}📦 Installing LLVM/Clang \\$LLVM_VERSION...\\${NC}\"

# Download and execute official LLVM installation script
if ! command -v clang-\\$LLVM_MAJOR &> /dev/null; then
    wget -q https://apt.llvm.org/llvm.sh
    chmod +x llvm.sh
    sudo ./llvm.sh \\$LLVM_MAJOR all
    rm -f llvm.sh
    
    # Create symlinks for easier access
    sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-\\$LLVM_MAJOR 100
    sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-\\$LLVM_MAJOR 100
    sudo update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-\\$LLVM_MAJOR 100
else
    echo -e \"\\${GREEN}✅ LLVM/Clang \\$LLVM_MAJOR already installed\\${NC}\"
fi

# Install comprehensive LLVM/Clang analysis tools
echo -e \"\\${YELLOW}🔬 Installing LLVM/Clang analysis and visualization tools...\\${NC}\"
sudo apt-get install -y \\\\
    clang-tools-\\$LLVM_MAJOR \\\\
    clang-format-\\$LLVM_MAJOR \\\\
    clang-tidy-\\$LLVM_MAJOR \\\\
    clangd-\\$LLVM_MAJOR \\\\
    llvm-\\$LLVM_MAJOR-dev \\\\
    llvm-\\$LLVM_MAJOR-tools \\\\
    libclang-\\$LLVM_MAJOR-dev \\\\
    libclang-common-\\$LLVM_MAJOR-dev \\\\
    libllvm\\$LLVM_MAJOR \\\\
    libc++-\\$LLVM_MAJOR-dev \\\\
    libc++abi-\\$LLVM_MAJOR-dev \\\\
    lldb-\\$LLVM_MAJOR \\\\
    lld-\\$LLVM_MAJOR

# Create additional symlinks for analysis tools
sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/lldb lldb /usr/bin/lldb-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/opt opt /usr/bin/opt-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llc llc /usr/bin/llc-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/lli lli /usr/bin/lli-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-as llvm-as /usr/bin/llvm-as-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-dis llvm-dis /usr/bin/llvm-dis-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-link llvm-link /usr/bin/llvm-link-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-ar llvm-ar /usr/bin/llvm-ar-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-nm llvm-nm /usr/bin/llvm-nm-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-objdump llvm-objdump /usr/bin/llvm-objdump-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/scan-build scan-build /usr/bin/scan-build-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-cov llvm-cov /usr/bin/llvm-cov-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-profdata llvm-profdata /usr/bin/llvm-profdata-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/clang-query clang-query /usr/bin/clang-query-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/clang-check clang-check /usr/bin/clang-check-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/clang-analyzer clang-analyzer /usr/bin/clang-analyzer-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-extract llvm-extract /usr/bin/llvm-extract-\\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-bcanalyzer llvm-bcanalyzer /usr/bin/llvm-bcanalyzer-\\$LLVM_MAJOR 100

# Install Python packages for LLVM analysis
echo -e \"\\${YELLOW}🐍 Installing Python packages for LLVM analysis...\\${NC}\"
pip3 install --user \\\\
    libclang \\\\
    pycparser \\\\
    networkx \\\\
    matplotlib \\\\
    pygraphviz \\\\
    pandas \\\\
    seaborn \\\\
    plotly \\\\
    dash \\\\
    lizard \\\\
    cpplint

# Install additional development dependencies for the project
echo -e \"\\${YELLOW}📦 Installing project-specific dependencies...\\${NC}\"
sudo apt-get install -y \\
    libjson-c-dev \\
    libssl-dev \\
    libcurl4-openssl-dev \\
    zlib1g-dev \\
    libpthread-stubs0-dev \\
    libffi-dev \\
    python3 \\
    python3-pip \\
    python3-dev

# Install useful npm packages globally
echo -e \"\\${YELLOW}📦 Installing useful npm packages...\\${NC}\"
if command -v npm &> /dev/null; then
    sudo npm install -g \\
        json-server \\
        nodemon \\
        ws \\
        http-server \\
        tree-sitter-cli
fi

# Install additional analysis and profiling tools
echo -e \"\\${YELLOW}🔬 Installing code analysis and profiling tools...\\${NC}\"
sudo apt-get install -y \\
    cppcheck \\
    splint \\
    doxygen \\
    graphviz \\
    lcov \\
    gcovr \\
    htop \\
    iotop \\
    sysstat \\
    tcpdump \\
    cpd \\
    kwstyle

# Create analysis tools directory and scripts
echo -e \"\\${YELLOW}🔧 Setting up analysis tools and scripts...\\${NC}\"
mkdir -p tools reports/{ast,ir,quality,architecture,duplicates,dead_code}

# Create comprehensive analysis script
cat > tools/run_complete_analysis.sh << 'ANALYSISEOF'
#!/bin/bash
# Comprehensive LLVM-based code analysis for RKLLM MCP Server
# Auto-generated by CMake - DO NOT EDIT MANUALLY

echo \"🔍 Starting comprehensive LLVM code analysis...\"

# Create reports directory structure
mkdir -p reports/{ast,ir,quality,architecture,duplicates,dead_code}

# 1. Generate compilation database (if not exists)
if [ ! -f build/compile_commands.json ]; then
    echo \"📊 Generating compilation database...\"
    cd build && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .. && make -j\\$(nproc)
    cd ..
fi

# 2. Generate LLVM IR for all transport files
echo \"⚡ Generating LLVM IR...\"
for transport in stdio tcp udp http websocket; do
    if [ -f \"src/lib/transport/\\${transport}.c\" ]; then
        clang -emit-llvm -S \"src/lib/transport/\\${transport}.c\" \\
            -I src/include -I src/external/rkllm -I src/common \\
            -o \"reports/ir/\\${transport}_transport.ll\" 2>/dev/null || true
    fi
done

# 3. Static analysis with clang-tidy
echo \"🔬 Running static analysis...\"
clang-tidy src/lib/transport/*.c \\
    -checks=readability-*,performance-*,bugprone-*,clang-analyzer-* \\
    --header-filter=src/include/ > reports/quality/transport_analysis.txt 2>/dev/null || true

# 4. Generate call graphs (if opt is available)
echo \"📈 Generating call graphs...\"
if command -v opt &> /dev/null; then
    for ll_file in reports/ir/*.ll; do
        if [ -f \"\\$ll_file\" ]; then
            basename=\\$(basename \"\\$ll_file\" .ll)
            opt -analyze -print-callgraph \"\\$ll_file\" > \"reports/architecture/\\${basename}_callgraph.txt\" 2>/dev/null || true
        fi
    done
else
    echo \"⚠️  'opt' tool not available, skipping call graph analysis\"
fi

# 5. Dead code analysis using clang-query (if available)
echo \"💀 Detecting dead code...\"
if command -v clang-query &> /dev/null; then
    find src -name \"*.c\" -exec clang-query {} -c \"match functionDecl().bind('func')\" \\; > reports/dead_code/functions.txt 2>/dev/null || true
    find src -name \"*.c\" -exec clang-query {} -c \"match callExpr().bind('call')\" \\; > reports/dead_code/calls.txt 2>/dev/null || true
else
    echo \"⚠️  'clang-query' not available, skipping dead code analysis\"
fi

# 6. Complexity analysis using lizard
echo \"📊 Analyzing code complexity...\"
if command -v lizard &> /dev/null; then
    lizard src/lib/**/*.c --csv > reports/quality/complexity_metrics.csv 2>/dev/null || true
else
    echo \"⚠️  'lizard' not available, skipping complexity analysis\"
fi

# 7. Generate AST dumps for key files
echo \"🌳 Generating AST dumps...\"
for key_file in src/lib/core/rkllm_proxy.c src/lib/transport/tcp.c src/lib/transport/http.c; do
    if [ -f \"\\$key_file\" ]; then
        basename=\\$(basename \"\\$key_file\" .c)
        clang -Xclang -ast-dump -fsyntax-only \"\\$key_file\" \\
            -I src/include -I src/external/rkllm -I src/common \\
            > \"reports/ast/\\${basename}_ast.txt\" 2>/dev/null || true
    fi
done

# 8. Memory safety analysis (if available)
echo \"🛡️  Running memory safety analysis...\"
if command -v scan-build &> /dev/null; then
    scan-build -o reports/quality/scan-build make -C build > reports/quality/memory_analysis.txt 2>&1 || true
else
    echo \"⚠️  'scan-build' not available, skipping memory safety analysis\"
fi

# 9. Generate duplicate code report
echo \"🔄 Finding duplicate code...\"
if command -v cpd &> /dev/null; then
    cpd --language c --minimum-tokens 50 --format xml src/ > reports/duplicates/cpd_report.xml 2>/dev/null || true
else
    echo \"⚠️  'cpd' not available, skipping duplicate detection\"
fi

# 10. Generate summary report
echo \"📋 Generating summary report...\"
cat > reports/analysis_summary.txt << SUMMARYEOF
RKLLM MCP Server - Code Analysis Summary
=======================================
Generated: \\$(date)

Files Analyzed:
- Transport Layer: src/lib/transport/*.c
- Core Layer: src/lib/core/*.c  
- Protocol Layer: src/lib/protocol/*.c

Analysis Results:
- LLVM IR Files: \\$(ls reports/ir/*.ll 2>/dev/null | wc -l) files
- Static Analysis: reports/quality/transport_analysis.txt
- AST Dumps: \\$(ls reports/ast/*.txt 2>/dev/null | wc -l) files
- Call Graphs: \\$(ls reports/architecture/*_callgraph.txt 2>/dev/null | wc -l) files

Key Findings:
- Review reports/quality/transport_analysis.txt for code quality issues
- Check reports/architecture/ for architectural insights
- Examine reports/duplicates/ for code duplication patterns

Next Steps:
1. Review static analysis warnings in reports/quality/
2. Analyze architectural patterns in reports/architecture/
3. Address code duplication found in reports/duplicates/
SUMMARYEOF

echo \"✅ Analysis complete! Check reports/ directory for results.\"
echo \"📊 Summary: reports/analysis_summary.txt\"
ANALYSISEOF

chmod +x tools/run_complete_analysis.sh

# Set up environment variables in bashrc
echo -e \"\\${YELLOW}⚙️ Setting up environment variables...\\${NC}\"
if ! grep -q \"RKLLM MCP Server Development Environment\" ~/.bashrc; then
    cat >> ~/.bashrc << 'ENVEOF'

# RKLLM MCP Server Development Environment
export CC=clang
export CXX=clang++
export LLVM_CONFIG=llvm-config

# Useful aliases for development
alias ll='ls -alF'
alias la='ls -A'
alias gdb='gdb -q'
alias valgrind='valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes'
alias objdump='objdump -d'
alias hexdump='hexdump -C'

# MCP Server specific aliases
alias mcp-build='cd build && make -j\\$(nproc)'
alias mcp-test='cd build && make test-js'
alias mcp-clean='rm -rf build && mkdir build'
alias mcp-analyze='./tools/run_complete_analysis.sh'
ENVEOF
fi

# Verify installations
echo -e \"\\${GREEN}✅ Verifying installations...\\${NC}\"
echo \"Clang version:\"
clang --version | head -1
echo \"\"
echo \"LLVM version:\"
llvm-config --version
echo \"\"
echo \"Node.js version:\"
node --version
echo \"\"
echo \"npm version:\"
npm --version
echo \"\"
echo \"GDB version:\"
gdb --version | head -1
echo \"\"
echo \"CMake version:\"
cmake --version | head -1

echo -e \"\\${GREEN}🎉 Development environment setup complete!\\${NC}\"
echo -e \"\\${YELLOW}💡 Please run 'source ~/.bashrc' or restart your terminal to apply environment changes.\\${NC}\"
echo -e \"\\${BLUE}📚 You can now build the project with: cd build && cmake .. && make\\${NC}\"
"
    )
    
    # Make script executable
    execute_process(
        COMMAND chmod +x ${DEV_SCRIPT}
        RESULT_VARIABLE chmod_result
    )
    
    if(chmod_result EQUAL 0)
        message(STATUS "📝 Generated development setup script: ${DEV_SCRIPT}")
        
        # Execute the development setup script
        message(STATUS "🔄 Executing development environment setup (this may take a few minutes)...")
        execute_process(
            COMMAND bash ${DEV_SCRIPT}
            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
            RESULT_VARIABLE setup_result
            OUTPUT_VARIABLE setup_output
            ERROR_VARIABLE setup_error
        )
        
        if(setup_result EQUAL 0)
            # Create lock file to prevent re-execution
            file(WRITE ${DEV_SETUP_LOCK} "Development environment setup completed")
            message(STATUS "Development environment setup completed successfully!")
            message(STATUS "Lock file created: ${DEV_SETUP_LOCK}")
        else()
            message(WARNING "Development environment setup had issues")
            # message(WARNING "Output: ${setup_output}")
            # message(WARNING "Error: ${setup_error}")
            message(STATUS "You can re-run setup by deleting: ${DEV_SETUP_LOCK}")
        endif()
    else()
        message(FATAL_ERROR "Failed to make development setup script executable")
    endif()
else()
    message(STATUS "Development environment already set up (lock file exists)")
    message(STATUS "To re-run setup, delete: ${DEV_SETUP_LOCK}")
endif()

# =============================================================================
# CONTINUE WITH NORMAL CMAKE CONFIGURATION
# =============================================================================

# Set C23 standard and use clang as default compiler
set(CMAKE_C_STANDARD 23)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)

# Set default compiler to clang if not specified
if(NOT CMAKE_C_COMPILER_ID STREQUAL "Clang")
    set(CMAKE_C_COMPILER clang)
endif()

# Build configuration
set(CMAKE_BUILD_TYPE Debug CACHE STRING "Build type")
set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "RelWithDebInfo" "MinSizeRel")

# Compiler flags
set(CMAKE_C_FLAGS "-Wall -Wextra -g")
set(CMAKE_C_FLAGS_DEBUG "-O0 -g3 -DDEBUG")
set(CMAKE_C_FLAGS_RELEASE "-O3 -DNDEBUG")

# Find required packages
find_package(PkgConfig REQUIRED)
find_package(Threads REQUIRED)

# Find json-c library
pkg_check_modules(JSON_C REQUIRED json-c)

# Include directories
include_directories(
    ${CMAKE_SOURCE_DIR}/src
    ${CMAKE_SOURCE_DIR}/src/external/rkllm
    ${CMAKE_SOURCE_DIR}/src/common
    ${CMAKE_SOURCE_DIR}/src/include
    ${CMAKE_SOURCE_DIR}/src/lib
    ${JSON_C_INCLUDE_DIRS}
)

# Download RKLLM library and header files if they don't exist
set(RKLLM_LIB_PATH "${CMAKE_SOURCE_DIR}/src/external/rkllm/librkllmrt.so")
set(RKLLM_HEADER_PATH "${CMAKE_SOURCE_DIR}/src/external/rkllm/rkllm.h")

# Create rkllm directory if it doesn't exist
file(MAKE_DIRECTORY "${CMAKE_SOURCE_DIR}/src/external/rkllm")

# Download librkllmrt.so if it doesn't exist
if(NOT EXISTS ${RKLLM_LIB_PATH})
    message(STATUS "Downloading librkllmrt.so for aarch64...")
    file(DOWNLOAD 
        "https://github.com/airockchip/rknn-llm/raw/main/rkllm-runtime/Linux/librkllm_api/aarch64/librkllmrt.so"
        ${RKLLM_LIB_PATH}
        SHOW_PROGRESS
        STATUS download_status
    )
    list(GET download_status 0 status_code)
    if(NOT status_code EQUAL 0)
        message(FATAL_ERROR "Failed to download librkllmrt.so")
    endif()
    message(STATUS "Successfully downloaded librkllmrt.so")
endif()

# Download rkllm.h if it doesn't exist
if(NOT EXISTS ${RKLLM_HEADER_PATH})
    message(STATUS "Downloading rkllm.h header file...")
    file(DOWNLOAD 
        "https://github.com/airockchip/rknn-llm/raw/main/rkllm-runtime/Linux/librkllm_api/include/rkllm.h"
        ${RKLLM_HEADER_PATH}
        SHOW_PROGRESS
        STATUS download_status
    )
    list(GET download_status 0 status_code)
    if(NOT status_code EQUAL 0)
        message(FATAL_ERROR "Failed to download rkllm.h")
    endif()
    message(STATUS "Successfully downloaded rkllm.h")
endif()

# Download and build wsServer WebSocket library
set(WSSERVER_DIR "${CMAKE_SOURCE_DIR}/src/external/wsServer")
set(WSSERVER_LIB "${WSSERVER_DIR}/libws.a")

if(NOT EXISTS ${WSSERVER_DIR})
    message(STATUS "Downloading wsServer WebSocket library...")
    
    # Download wsServer source
    file(DOWNLOAD 
        "https://github.com/Theldus/wsServer/archive/refs/heads/master.zip"
        "${CMAKE_BINARY_DIR}/wsServer.zip"
        SHOW_PROGRESS
    )
    
    # Extract wsServer
    execute_process(
        COMMAND ${CMAKE_COMMAND} -E tar xf "${CMAKE_BINARY_DIR}/wsServer.zip"
        WORKING_DIRECTORY "${CMAKE_BINARY_DIR}"
    )
    
    # Move to external directory
    execute_process(
        COMMAND ${CMAKE_COMMAND} -E rename 
        "${CMAKE_BINARY_DIR}/wsServer-master" 
        ${WSSERVER_DIR}
    )
    
    # Clean up zip file
    file(REMOVE "${CMAKE_BINARY_DIR}/wsServer.zip")
endif()

# Build wsServer library if not already built
if(NOT EXISTS ${WSSERVER_LIB})
    message(STATUS "Building wsServer library...")
    
    # Use wsServer's own CMakeLists.txt to build the library
    execute_process(
        COMMAND ${CMAKE_COMMAND} -B build -S .
        WORKING_DIRECTORY ${WSSERVER_DIR}
    )
    
    execute_process(
        COMMAND ${CMAKE_COMMAND} --build build --target ws
        WORKING_DIRECTORY ${WSSERVER_DIR}
    )
    
    # Copy the built library to expected location
    execute_process(
        COMMAND ${CMAKE_COMMAND} -E copy 
        "${WSSERVER_DIR}/build/libws.a" 
        ${WSSERVER_LIB}
    )
endif()

# Add wsServer include directory
include_directories(${WSSERVER_DIR}/include)

# Auto-generate RKLLM constants from header file
set(RKLLM_HEADER "${CMAKE_SOURCE_DIR}/src/external/rkllm/rkllm.h")
set(RKLLM_AUTO_GENERATED "${CMAKE_SOURCE_DIR}/src/lib/core/rkllm_auto_generated.c")

add_custom_command(
    OUTPUT ${RKLLM_AUTO_GENERATED}
    COMMAND ${CMAKE_SOURCE_DIR}/tools/rkllm_parser.sh ${RKLLM_HEADER} ${CMAKE_SOURCE_DIR}/src/lib/core
    DEPENDS ${RKLLM_HEADER} ${CMAKE_SOURCE_DIR}/tools/rkllm_parser.sh
    COMMENT "Auto-generating RKLLM constants from header..."
)

# Link directories
link_directories(
    ${CMAKE_SOURCE_DIR}/src/external/rkllm
    ${JSON_C_LIBRARY_DIRS}
)

# Source files
set(COMMON_SRCS
    src/common/memory_utils/memory_utils.c
    src/common/string_utils/string_utils.c
    src/common/error_utils/error_utils.c
    src/common/handle_utils/handle_utils.c
    src/common/transport_utils/transport_utils.c
    src/common/time_utils/time_utils.c
)

set(SERVER_CORE_SRCS
    src/lib/core/server.c
    src/lib/core/operations.c
    src/lib/core/rkllm_proxy.c
    src/lib/core/stream_manager.c
    src/lib/core/public_api.c
    src/lib/core/rkllm_auto_generated.c
    src/lib/core/rkllm_array_utils.c
    src/lib/core/rkllm_error_mapping.c
    src/lib/core/rkllm_streaming_context.c
    src/lib/core/process_manager.c
    src/lib/core/settings.c
    src/lib/core/settings_global.c
    src/lib/core/npu_operation_classifier.c
    src/lib/core/npu_queue.c
    src/lib/core/npu_worker.c
    src/lib/core/async_response.c
    src/lib/core/error_mapping.c
    src/lib/core/memory_tracker.c
    # Phase 5: Production Features
    src/lib/system/logger.c
    src/lib/system/metrics.c
    src/lib/system/performance.c
)

set(SERVER_SYSTEM_SRCS
    src/lib/system/info.c
    src/lib/system/memory.c
    src/lib/system/resources.c
)


set(SERVER_TRANSPORT_SRCS
    src/lib/transport/base.c
    src/lib/transport/manager.c
    src/lib/transport/streaming_buffer_manager.c
    src/lib/transport/stdio.c
    src/lib/transport/tcp.c
    src/lib/transport/udp.c
    src/lib/transport/http.c
    # src/lib/transport/websocket.c  # Disabled: requires ws library
    src/lib/transport/recovery.c
)

set(SERVER_PROTOCOL_SRCS
    src/lib/protocol/mcp_protocol.c
    src/lib/protocol/jsonrpc.c
    src/lib/protocol/adapter.c
    src/lib/protocol/http_buffer_manager.c
    # src/lib/protocol/streaming.c - removed duplicate
)

# JavaScript test client (no C tests)
# All testing is now done via tests/client.js


# All library sources
set(LIB_SRCS
    ${COMMON_SRCS}
    ${SERVER_CORE_SRCS}
    ${SERVER_SYSTEM_SRCS}
    ${SERVER_TRANSPORT_SRCS}
    ${SERVER_PROTOCOL_SRCS}
)

# Create main library
add_library(mcp_server_lib STATIC ${LIB_SRCS})
target_link_libraries(mcp_server_lib 
    ${CMAKE_THREAD_LIBS_INIT}
    ${CMAKE_DL_LIBS}
    rkllmrt
    ${JSON_C_LIBRARIES}
    ${WSSERVER_LIB}
)
target_compile_options(mcp_server_lib PRIVATE ${JSON_C_CFLAGS_OTHER})

# Set RPATH for runtime library search
set_target_properties(mcp_server_lib PROPERTIES
    LINK_FLAGS "-Wl,-rpath,${CMAKE_SOURCE_DIR}/src/external/rkllm"
)

# Main executable
add_executable(mcp_server src/main.c)
target_link_libraries(mcp_server mcp_server_lib)
set_target_properties(mcp_server PROPERTIES
    LINK_FLAGS "-Wl,-rpath,${CMAKE_SOURCE_DIR}/src/external/rkllm"
)

# No C test executables - using JavaScript client instead


# Custom targets for JavaScript testing
add_custom_target(test-js
    COMMAND node tests/client.js
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    COMMENT "Running JavaScript test client..."
)

add_custom_target(run-all-tests
    COMMAND node tests/client.js
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    DEPENDS mcp_server
    COMMENT "Running all tests via JavaScript client..."
)

add_custom_target(check-syntax
    COMMAND echo "Syntax checking with clang..."
    COMMENT "Checking syntax of all source files"
)

# =============================================================================
# LLVM ANALYSIS TARGETS (Single Comprehensive Command)
# =============================================================================

# Single comprehensive analysis target - uses the comprehensive script
add_custom_target(analyze
    COMMAND bash ${CMAKE_SOURCE_DIR}/scripts/analyze.sh
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    COMMENT "Running most comprehensive LLVM analysis - generates exhaustive reports for system understanding, duplicate detection, dead code hunting, and architectural insights..."
)

# Install targets
install(TARGETS mcp_server
    RUNTIME DESTINATION bin
)

install(FILES tests/client.js
    DESTINATION bin
    PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
)

install(TARGETS mcp_server_lib
    ARCHIVE DESTINATION lib
)

# Print configuration info
message(STATUS "MCP Server Project Configuration:")
message(STATUS "  Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "  C Compiler: ${CMAKE_C_COMPILER}")
message(STATUS "  C Standard: C${CMAKE_C_STANDARD}")
message(STATUS "  JSON-C found: ${JSON_C_FOUND}")
message(STATUS "  JSON-C version: ${JSON_C_VERSION}")
message(STATUS "  JSON-C libraries: ${JSON_C_LIBRARIES}")
message(STATUS "  JSON-C include dirs: ${JSON_C_INCLUDE_DIRS}")