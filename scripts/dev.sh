#!/usr/bin/env bash
# Comprehensive development environment setup for RKLLM MCP Server
# Auto-generated by CMake - DO NOT EDIT MANUALLY

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "\🚀 Setting up RKLLM MCP Server development environment...\"

# Update system packages
echo -e "\📦 Updating system packages...\"
sudo apt-get update -qq

# Install essential development tools
echo -e "\🔧 Installing essential development tools...\"
sudo apt-get install -y \
    build-essential \
    git \
    curl \
    wget \
    cmake \
    pkg-config \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-release \
    unzip

# Install reverse engineering and debugging tools
echo -e "\🔍 Installing reverse engineering and debugging tools...\"
sudo apt-get install -y \
    gdb \
    gdb-multiarch \
    valgrind \
    strace \
    ltrace \
    binutils \
    binutils-dev \
    strings \
    file \
    hexdump \
    xxd \
    objdump \
    readelf \
    nm \
    objcopy \
    strip \
    addr2line \
    c++filt \
    size \
    ar \
    ranlib

# Get latest LLVM version from GitHub API
echo -e "\🔍 Getting latest LLVM version...\"
LLVM_LATEST=\$(curl -s https://api.github.com/repos/llvm/llvm-project/releases/latest | grep tag_name | cut -d '"' -f4 | head -1)
LLVM_VERSION=\$(echo "\$LLVM_LATEST" | sed 's/^llvmorg-//')
LLVM_MAJOR=\$(echo "\$LLVM_VERSION" | cut -d. -f1)

echo -e "\📦 Installing LLVM/Clang \$LLVM_VERSION...\"

# Download and execute official LLVM installation script
if ! command -v clang-\$LLVM_MAJOR &> /dev/null; then
    wget -q https://apt.llvm.org/llvm.sh
    chmod +x llvm.sh
    sudo ./llvm.sh \$LLVM_MAJOR all
    rm -f llvm.sh
    
    # Create symlinks for easier access
    sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-\$LLVM_MAJOR 100
    sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-\$LLVM_MAJOR 100
    sudo update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-\$LLVM_MAJOR 100
else
    echo -e "\✅ LLVM/Clang \$LLVM_MAJOR already installed\"
fi

# Install comprehensive LLVM/Clang analysis tools
echo -e "\🔬 Installing LLVM/Clang analysis and visualization tools...\"
sudo apt-get install -y \\
    clang-tools-\$LLVM_MAJOR \\
    clang-format-\$LLVM_MAJOR \\
    clang-tidy-\$LLVM_MAJOR \\
    clangd-\$LLVM_MAJOR \\
    llvm-\$LLVM_MAJOR-dev \\
    llvm-\$LLVM_MAJOR-tools \\
    libclang-\$LLVM_MAJOR-dev \\
    libclang-common-\$LLVM_MAJOR-dev \\
    libllvm\$LLVM_MAJOR \\
    libc++-\$LLVM_MAJOR-dev \\
    libc++abi-\$LLVM_MAJOR-dev \\
    lldb-\$LLVM_MAJOR \\
    lld-\$LLVM_MAJOR

# Create additional symlinks for analysis tools
sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/lldb lldb /usr/bin/lldb-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/opt opt /usr/bin/opt-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llc llc /usr/bin/llc-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/lli lli /usr/bin/lli-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-as llvm-as /usr/bin/llvm-as-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-dis llvm-dis /usr/bin/llvm-dis-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-link llvm-link /usr/bin/llvm-link-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-ar llvm-ar /usr/bin/llvm-ar-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-nm llvm-nm /usr/bin/llvm-nm-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-objdump llvm-objdump /usr/bin/llvm-objdump-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/scan-build scan-build /usr/bin/scan-build-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-cov llvm-cov /usr/bin/llvm-cov-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-profdata llvm-profdata /usr/bin/llvm-profdata-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/clang-query clang-query /usr/bin/clang-query-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/clang-check clang-check /usr/bin/clang-check-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/clang-analyzer clang-analyzer /usr/bin/clang-analyzer-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-extract llvm-extract /usr/bin/llvm-extract-\$LLVM_MAJOR 100
sudo update-alternatives --install /usr/bin/llvm-bcanalyzer llvm-bcanalyzer /usr/bin/llvm-bcanalyzer-\$LLVM_MAJOR 100

# Install Python packages for LLVM analysis
echo -e "\🐍 Installing Python packages for LLVM analysis...\"
pip3 install --user \\
    libclang \\
    pycparser \\
    networkx \\
    matplotlib \\
    pygraphviz \\
    pandas \\
    seaborn \\
    plotly \\
    dash \\
    lizard \\
    cpplint

# Install additional development dependencies for the project
echo -e "\📦 Installing project-specific dependencies...\"
sudo apt-get install -y \
    libjson-c-dev \
    libssl-dev \
    libcurl4-openssl-dev \
    zlib1g-dev \
    libpthread-stubs0-dev \
    libffi-dev \
    python3 \
    python3-pip \
    python3-dev

# Install useful npm packages globally
echo -e "\📦 Installing useful npm packages...\"
if command -v npm &> /dev/null; then
    sudo npm install -g \
        json-server \
        nodemon \
        ws \
        http-server \
        tree-sitter-cli
fi

# Install additional analysis and profiling tools
echo -e "\🔬 Installing code analysis and profiling tools...\"
sudo apt-get install -y \
    cppcheck \
    splint \
    doxygen \
    graphviz \
    lcov \
    gcovr \
    htop \
    iotop \
    sysstat \
    tcpdump \
    cpd \
    kwstyle

# Create analysis tools directory and scripts
echo -e "\🔧 Setting up analysis tools and scripts...\"
mkdir -p tools reports/{ast,ir,quality,architecture,duplicates,dead_code}

# Create comprehensive analysis script
cat > tools/run_complete_analysis.sh << 'ANALYSISEOF'
#!/bin/bash
# Comprehensive LLVM-based code analysis for RKLLM MCP Server
# Auto-generated by CMake - DO NOT EDIT MANUALLY

echo "🔍 Starting comprehensive LLVM code analysis..."

# Create reports directory structure
mkdir -p reports/{ast,ir,quality,architecture,duplicates,dead_code}

# 1. Generate compilation database (if not exists)
if [ ! -f build/compile_commands.json ]; then
    echo "📊 Generating compilation database..."
    cd build && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .. && make -j\$(nproc)
    cd ..
fi

# 2. Generate LLVM IR for all transport files
echo "⚡ Generating LLVM IR..."
for transport in stdio tcp udp http websocket; do
    if [ -f "src/lib/transport/\.c" ]; then
        clang -emit-llvm -S "src/lib/transport/\.c" \
            -I src/include -I src/external/rkllm -I src/common \
            -o "reports/ir/\_transport.ll" 2>/dev/null || true
    fi
done

# 3. Static analysis with clang-tidy
echo "🔬 Running static analysis..."
clang-tidy src/lib/transport/*.c \
    -checks=readability-*,performance-*,bugprone-*,clang-analyzer-* \
    --header-filter=src/include/ > reports/quality/transport_analysis.txt 2>/dev/null || true

# 4. Generate call graphs (if opt is available)
echo "📈 Generating call graphs..."
if command -v opt &> /dev/null; then
    for ll_file in reports/ir/*.ll; do
        if [ -f "\$ll_file" ]; then
            basename=\$(basename "\$ll_file" .ll)
            opt -analyze -print-callgraph "\$ll_file" > "reports/architecture/\_callgraph.txt" 2>/dev/null || true
        fi
    done
else
    echo "⚠️  'opt' tool not available, skipping call graph analysis"
fi

# 5. Dead code analysis using clang-query (if available)
echo "💀 Detecting dead code..."
if command -v clang-query &> /dev/null; then
    find src -name "*.c" -exec clang-query {} -c "match functionDecl().bind('func')" \; > reports/dead_code/functions.txt 2>/dev/null || true
    find src -name "*.c" -exec clang-query {} -c "match callExpr().bind('call')" \; > reports/dead_code/calls.txt 2>/dev/null || true
else
    echo "⚠️  'clang-query' not available, skipping dead code analysis"
fi

# 6. Complexity analysis using lizard
echo "📊 Analyzing code complexity..."
if command -v lizard &> /dev/null; then
    lizard src/lib/**/*.c --csv > reports/quality/complexity_metrics.csv 2>/dev/null || true
else
    echo "⚠️  'lizard' not available, skipping complexity analysis"
fi

# 7. Generate AST dumps for key files
echo "🌳 Generating AST dumps..."
for key_file in src/lib/core/rkllm_proxy.c src/lib/transport/tcp.c src/lib/transport/http.c; do
    if [ -f "\$key_file" ]; then
        basename=\$(basename "\$key_file" .c)
        clang -Xclang -ast-dump -fsyntax-only "\$key_file" \
            -I src/include -I src/external/rkllm -I src/common \
            > "reports/ast/\_ast.txt" 2>/dev/null || true
    fi
done

# 8. Memory safety analysis (if available)
echo "🛡️  Running memory safety analysis..."
if command -v scan-build &> /dev/null; then
    scan-build -o reports/quality/scan-build make -C build > reports/quality/memory_analysis.txt 2>&1 || true
else
    echo "⚠️  'scan-build' not available, skipping memory safety analysis"
fi

# 9. Generate duplicate code report
echo "🔄 Finding duplicate code..."
if command -v cpd &> /dev/null; then
    cpd --language c --minimum-tokens 50 --format xml src/ > reports/duplicates/cpd_report.xml 2>/dev/null || true
else
    echo "⚠️  'cpd' not available, skipping duplicate detection"
fi

# 10. Generate summary report
echo "📋 Generating summary report..."
cat > reports/analysis_summary.txt << SUMMARYEOF
RKLLM MCP Server - Code Analysis Summary
=======================================
Generated: \$(date)

Files Analyzed:
- Transport Layer: src/lib/transport/*.c
- Core Layer: src/lib/core/*.c  
- Protocol Layer: src/lib/protocol/*.c

Analysis Results:
- LLVM IR Files: \$(ls reports/ir/*.ll 2>/dev/null | wc -l) files
- Static Analysis: reports/quality/transport_analysis.txt
- AST Dumps: \$(ls reports/ast/*.txt 2>/dev/null | wc -l) files
- Call Graphs: \$(ls reports/architecture/*_callgraph.txt 2>/dev/null | wc -l) files

Key Findings:
- Review reports/quality/transport_analysis.txt for code quality issues
- Check reports/architecture/ for architectural insights
- Examine reports/duplicates/ for code duplication patterns

Next Steps:
1. Review static analysis warnings in reports/quality/
2. Analyze architectural patterns in reports/architecture/
3. Address code duplication found in reports/duplicates/
SUMMARYEOF

echo "✅ Analysis complete! Check reports/ directory for results."
echo "📊 Summary: reports/analysis_summary.txt"
ANALYSISEOF

chmod +x tools/run_complete_analysis.sh

# Set up environment variables in bashrc
echo -e "\⚙️ Setting up environment variables...\"
if ! grep -q "RKLLM MCP Server Development Environment" ~/.bashrc; then
    cat >> ~/.bashrc << 'ENVEOF'

# RKLLM MCP Server Development Environment
export CC=clang
export CXX=clang++
export LLVM_CONFIG=llvm-config

# Useful aliases for development
alias ll='ls -alF'
alias la='ls -A'
alias gdb='gdb -q'
alias valgrind='valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes'
alias objdump='objdump -d'
alias hexdump='hexdump -C'

# MCP Server specific aliases
alias mcp-build='cd build && make -j\$(nproc)'
alias mcp-test='cd build && make test-js'
alias mcp-clean='rm -rf build && mkdir build'
alias mcp-analyze='./tools/run_complete_analysis.sh'
ENVEOF
fi

# Verify installations
echo -e "\✅ Verifying installations...\"
echo "Clang version:"
clang --version | head -1
echo ""
echo "LLVM version:"
llvm-config --version
echo ""
echo "Node.js version:"
node --version
echo ""
echo "npm version:"
npm --version
echo ""
echo "GDB version:"
gdb --version | head -1
echo ""
echo "CMake version:"
cmake --version | head -1

echo -e "\🎉 Development environment setup complete!\"
echo -e "\💡 Please run 'source ~/.bashrc' or restart your terminal to apply environment changes.\"
echo -e "\📚 You can now build the project with: cd build && cmake .. && make\"
